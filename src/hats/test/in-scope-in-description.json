{"version":"v2","project-metadata":{"name":"AlephZeroAMM","icon":"ipfs://QmVspQc5fhshY6YaUD86PfqbtkS9JJVfSZXAt5hGVubCG6","tokenIcon":"ipfs://QmSS3cXQdhKfyHcLpg1JXc2xXMdggLxqybR6Yuahi5Ks2w","website":"https://github.com/Cardinal-Cryptography/common-amm","type":"audit","oneLiner":"UniswapV2 protocol implementation in ink_ smart contract language.","intendedCompetitionAmount":"80000","starttime":1705590000,"endtime":1706540400,"isPrivateAudit":false,"isContinuousAudit":false},"committee":{"chainId":"1","multisig-address":"0x568CAe780c967a8ca89085240c4F494354168233","members":[{"name":"deuszx","address":"0x9c4Df76b31E5EA9eEe8f34434A84E0CC09209bd0","linkedMultisigAddress":"0x568CAe780c967a8ca89085240c4F494354168233","twitter-link":"https://github.com/deuszx","image-ipfs-link":"","pgp-keys":[{"publicKey":"-----BEGIN PGP PUBLIC KEY BLOCK-----\n\n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\n1mWMPL37NoBQ9oEnHPQT\n=h61d\n-----END PGP PUBLIC KEY BLOCK-----"}]},{"name":"Adam","address":"0xaf07b7656b1e80DB839C9f16635f4DAe16E8FB3C","linkedMultisigAddress":"0x568CAe780c967a8ca89085240c4F494354168233","twitter-link":"https://twitter.com/GagolAdam","image-ipfs-link":"","pgp-keys":[{"publicKey":""}]},{"name":"Damian","address":"0x83627B588852f9bE5c03947ae1780fC9E4C0533D","linkedMultisigAddress":"0x568CAe780c967a8ca89085240c4F494354168233","twitter-link":"https://github.com/DamianStraszak","image-ipfs-link":"","pgp-keys":[{"publicKey":"-----BEGIN PGP PUBLIC KEY BLOCK-----\n\n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\n=jGVe\n-----END PGP PUBLIC KEY BLOCK-----"}]}]},"source":{"name":"","url":""},"severities":[{"id":"77091747-0966-4802-a196-7b087f7e9c1f","decryptSubmissions":false,"name":"Minor","contracts-covered":[],"nft-metadata":{"name":"Good citizen","description":"Audit Gas Saving reward","animation_url":"ipfs://QmQWgcpU5qR8SxKRtL5DX8CjpP46XpZwXvHutpEtnLFWEa/template_animation.mp4","image":"ipfs://QmQWgcpU5qR8SxKRtL5DX8CjpP46XpZwXvHutpEtnLFWEa/template_image.jpg","external_url":""},"description":"Issues where the behavior of the contracts differs from the intended behavior (as described in the docs and by common sense), but no funds are at risk.\n\n**SUBMISSION GUIDELINES:**\n\n* Submissions should be made using our Dapp.\n* You can submit one on-chain submission mentioning all issues found on the repo.\n* All new submissions will be created on the forked repo for this project on Hats: https://github.com/hats-finance\n* Please send a plain ASCII file following the following format:\n  * [TITLE]: short description of the issue.\n  * [SEVERITY]: either high, medium or low, see the rules.\n* Submission should contain at least one test demonstrating the problem and, if possible, a possible fix.\n\n**REPORT TEMPLATE**:\n\n* Description: Describe the context and the effect of the vulnerability.\n * Attack scenario: Describe how the vulnerability can be exploited. \n * Attachment:\n 1. Proof of Concept (PoC) file: You must provide a file containing a proof of concept (PoC) that demonstrates the vulnerability you have discovered. \n 2. Revised Code File (Optional): If possible, please provide a second file containing the revised code that offers a potential fix for the vulnerability. This file should include the following information:\n * Comment with clear explanation of the proposed fix.\n* The revised code with your suggested changes. \n * Any additional comments or explanations that clarify how the fix addresses the vulnerability. \n\n * Recommendation: Describe a patch or potential fix for the vulnerability.\n *Due to the nature of the audit competition mechanism, the repost will not be encrypted*  \n\n**LIMITATIONS:**\nReporters will not receive a bounty for:\n\n* Any known issue, such as:\n  * Issues mentioned in any previous audit reports\n  * Vulnerabilities that were already made public (either by HATS or by a third party)\n  * “Centralization risks” that are known and/or explicitly coded into the protocol (e.g. an administrator can upgrade crucial contracts and steal all funds)\n*  Attacks that require access to leaked private keys or trusted addresses.\n*  Issues that are not responsibly disclosed (issues should typically be reported through our platform)","percentage":"100","capAmount":"1000","contractsCoveredNew":[]},{"id":"bbec2a3f-8605-4acf-b21c-a0d394de219a","decryptSubmissions":true,"name":"Low","contracts-covered":[],"nft-metadata":{"name":"Protocol protector","description":"Audit low severity reward","animation_url":"ipfs://QmQWgcpU5qR8SxKRtL5DX8CjpP46XpZwXvHutpEtnLFWEa/template_animation.mp4","image":"ipfs://QmQWgcpU5qR8SxKRtL5DX8CjpP46XpZwXvHutpEtnLFWEa/template_image.jpg","external_url":""},"description":"Gas Griefing Attacks (make users overpay for gas). Gas griefing attacks that require non-standard PSP22 token implementations to work are out of scope.\n\n**SUBMISSION GUIDELINES:**\n\n* Submissions should be made using our Dapp.\n* You can submit one on-chain submission mentioning all issues found on the repo.\n* All new submissions will be created on the forked repo for this project on Hats: https://github.com/hats-finance\n* Please send a plain ASCII file following the following format:\n  * [TITLE]: short description of the issue.\n  * [SEVERITY]: either high, medium or low, see the rules.\n* Submission should contain at least one test demonstrating the problem and, if possible, a possible fix.\n\n**REPORT TEMPLATE**:\n\n* Description: Describe the context and the effect of the vulnerability.\n * Attack scenario: Describe how the vulnerability can be exploited. \n * Attachment:\n 1. Proof of Concept (PoC) file: You must provide a file containing a proof of concept (PoC) that demonstrates the vulnerability you have discovered. \n 2. Revised Code File (Optional): If possible, please provide a second file containing the revised code that offers a potential fix for the vulnerability. This file should include the following information:\n * Comment with clear explanation of the proposed fix.\n* The revised code with your suggested changes. \n * Any additional comments or explanations that clarify how the fix addresses the vulnerability. \n\n * Recommendation: Describe a patch or potential fix for the vulnerability.\n *Due to the nature of the audit competition mechanism, the repost will not be encrypted*  \n\n**LIMITATIONS:**\nReporters will not receive a bounty for:\n\n* Any known issue, such as:\n  * Issues mentioned in any previous audit reports\n  * Vulnerabilities that were already made public (either by HATS or by a third party)\n  * “Centralization risks” that are known and/or explicitly coded into the protocol (e.g. an administrator can upgrade crucial contracts and steal all funds)\n*  Attacks that require access to leaked private keys or trusted addresses.\n*  Issues that are not responsibly disclosed (issues should typically be reported through our platform)","percentage":"100","capAmount":"3000","contractsCoveredNew":[]},{"id":"2904a93b-3510-40f9-906b-4b9eea69d8d8","decryptSubmissions":true,"name":"Medium","contracts-covered":[],"nft-metadata":{"name":"Protocol champion","description":"Audit medium severity reward","animation_url":"ipfs://QmQWgcpU5qR8SxKRtL5DX8CjpP46XpZwXvHutpEtnLFWEa/template_animation.mp4","image":"ipfs://QmQWgcpU5qR8SxKRtL5DX8CjpP46XpZwXvHutpEtnLFWEa/template_image.jpg","external_url":""},"description":"Issues that lead to an economic loss but do not lead to direct loss of on-chain assets. Examples are:\n\n* Attacks that make essential functionality of the contracts temporarily unusable or inaccessible.\n* Short-term freezing of user funds.\n\n**SUBMISSION GUIDELINES:**\n\n* Submissions should be made using our Dapp.\n* You can submit one on-chain submission mentioning all issues found on the repo.\n* All new submissions will be created on the forked repo for this project on Hats: https://github.com/hats-finance\n* Please send a plain ASCII file following the following format:\n  * [TITLE]: short description of the issue.\n  * [SEVERITY]: either high, medium or low, see the rules.\n* Submission should contain at least one test demonstrating the problem and, if possible, a possible fix.\n\n**REPORT TEMPLATE**:\n\n* Description: Describe the context and the effect of the vulnerability.\n * Attack scenario: Describe how the vulnerability can be exploited. \n * Attachment:\n 1. Proof of Concept (PoC) file: You must provide a file containing a proof of concept (PoC) that demonstrates the vulnerability you have discovered. \n 2. Revised Code File (Optional): If possible, please provide a second file containing the revised code that offers a potential fix for the vulnerability. This file should include the following information:\n * Comment with clear explanation of the proposed fix.\n* The revised code with your suggested changes. \n * Any additional comments or explanations that clarify how the fix addresses the vulnerability. \n\n * Recommendation: Describe a patch or potential fix for the vulnerability.\n *Due to the nature of the audit competition mechanism, the repost will not be encrypted*  \n\n**LIMITATIONS:**\nReporters will not receive a bounty for:\n\n* Any known issue, such as:\n  * Issues mentioned in any previous audit reports\n  * Vulnerabilities that were already made public (either by HATS or by a third party)\n  * “Centralization risks” that are known and/or explicitly coded into the protocol (e.g. an administrator can upgrade crucial contracts and steal all funds)\n* Attacks that require access to leaked private keys or trusted addresses.\n* Issues that are not responsibly disclosed (issues should typically be reported through our platform)","percentage":"100","capAmount":"10000","contractsCoveredNew":[]},{"id":"d1b77b43-65c5-49bf-8e40-d6fd4978f5d7","decryptSubmissions":true,"name":"High","contracts-covered":[],"nft-metadata":{"name":"Protocol savior","description":"Audit high severity reward","animation_url":"ipfs://QmQWgcpU5qR8SxKRtL5DX8CjpP46XpZwXvHutpEtnLFWEa/template_animation.mp4","image":"ipfs://QmQWgcpU5qR8SxKRtL5DX8CjpP46XpZwXvHutpEtnLFWEa/template_image.jpg","external_url":""},"description":"For a submission to be considered a HIGH-risk vulnerability, issues must:\n\n* Direct theft of any user funds, whether at rest or in motion.\n* Long-term freezing of user funds.\n* Theft or long term freezing of unclaimed yield or other assets.\n* Protocol insolvency.\n\n**SUBMISSION GUIDELINES:**\n\n* Submissions should be made using our Dapp.\n* You can submit one on-chain submission mentioning all issues found on the repo.\n* All new submissions will be created on the forked repo for this project on Hats: https://github.com/hats-finance\n* Please send a plain ASCII file following the following format:\n  * [TITLE]: short description of the issue.\n  * [SEVERITY]: either high, medium or low, see the rules.\n* Submission should contain at least one test demonstrating the problem and, if possible, a possible fix.\n\n**REPORT TEMPLATE**:\n\n* Description: Describe the context and the effect of the vulnerability.\n * Attack scenario: Describe how the vulnerability can be exploited. \n * Attachment:\n 1. Proof of Concept (PoC) file: You must provide a file containing a proof of concept (PoC) that demonstrates the vulnerability you have discovered. \n 2. Revised Code File (Optional): If possible, please provide a second file containing the revised code that offers a potential fix for the vulnerability. This file should include the following information:\n * Comment with clear explanation of the proposed fix.\n* The revised code with your suggested changes. \n * Any additional comments or explanations that clarify how the fix addresses the vulnerability. \n\n * Recommendation: Describe a patch or potential fix for the vulnerability.\n *Due to the nature of the audit competition mechanism, the repost will not be encrypted*  \n\n**LIMITATIONS:**\nReporters will not receive a bounty for:\n\n* Any known issue, such as:\n  * Issues mentioned in any previous audit reports\n  * Vulnerabilities that were already made public (either by HATS or by a third party)\n  * “Centralization risks” that are known and/or explicitly coded into the protocol (e.g. an administrator can upgrade crucial contracts and steal all funds)\n* Attacks that require access to leaked private keys or trusted addresses.\n* Issues that are not responsibly disclosed (issues should typically be reported through our platform)","percentage":"100","capAmount":"25000","contractsCoveredNew":[]}],"scope":{"reposInformation":[{"isMain":true,"url":"https://github.com/Cardinal-Cryptography/common-amm","commitHash":"0a7264d707aea51b559a1bf94448681b59660f6a"}],"description":"## Project overview\n\nThe contracts implement a constant-product AMM based on the classical Uniswap V2 model together with a farm contract for boosting LP's rewards. Smart contracts are implemented in ink! smart contract language and adapted to work on Substrate platform. \n## Audit competition scope\n\n\n```\n|-- common-amm\n     |-- amm\n          |-- contracts\n               |-- factory\n                    |-- lib.rs\n               |-- pair\n                    |-- lib.rs\n               |-- router\n                    |-- lib.rs\n          |-- traits\n               |-- factory.rs\n               |-- pair.rs\n               |-- router.rs\n               |-- swap_callee.rs\n     |-- farm\n           |-- contract\n                |-- lib.rs\n           |-- trait\n                |-- lib.rs\n```","codeLangs":["rust"],"docsLink":"","outOfScope":"All files/folders not mentioned in the **IN-SCOPE** section.\n\nAll test modules in files from the **IN-SCOPE** section.","protocolSetupInstructions":{"tooling":"custom","instructions":"The repository contains information about how to run and test the contracts. \n\nIt's a Substrate ecosystem, with ink! smart contract language. Tooling required:\n1. Rust in correct version - defined by `rust-toolchain.toml` file from the repository.\n2. `cargo-contract` in correct version (`3.2.0`)\n\n\nTests can be ran as:\n1. Unit-tests (if logic that is being tested is contained to a single contract under test).\n2. ink's e2e test\n3. end-to-end test that executes test against a running node - this can be either an actual node or `substrate-contracts-node` (a minimized binary that runs a node underneath).\n4. drink!-based e2e tests that execute against minimal Runtime - this does not require running a full node while still testing the underlying `pallet-contracts` with contract deployment, cross-contract calls etc. This is preferred approach to write tests. We highly encourage participats to take a look as, in our mind, this is the ultimate way to write contract tests. Examples can be found in `./farm/tests/` directory."}},"id":"0x0d88a9ece90994ecb3ba704730819d71c139f60f"}