{
  "version": "v2",
  "project-metadata": {
      "name": "SafeStaking by HOPR",
      "icon": "ipfs://QmUB9uHN2JqWmPbSxGFaF679RN4rnhCHBegr4GbNDsWJWh",
      "tokenIcon": "ipfs://QmUB9uHN2JqWmPbSxGFaF679RN4rnhCHBegr4GbNDsWJWh",
      "website": "https://hub.hoprnet.org",
      "type": "audit",
      "oneLiner": "SafeStaking by HOPR is a new tool for securing staked crypto-assets on Ethereum and EVM-compatible chains",
      "intendedCompetitionAmount": "1000000",
      "starttime": 1696518000,
      "endtime": 1697731200,
      "isPrivateAudit": false
  },
  "committee": {
      "chainId": "1",
      "multisig-address": "0xB7FB3a8bb24e9369B8Ecfb9E417A52528E0983B2",
      "members": [
          
      ]
  },
  "source": {
      "name": "",
      "url": ""
  },
  "severities": [
      {
          "id": "c9dc2dd3-25d1-406d-8101-ebb2182acfc1",
          "decryptSubmissions": false,
          "name": "Gas Saving",
          "contracts-covered": [],
          "nft-metadata": {
              "name": "Good citizen",
              "description": "Audit Gas Saving reward",
              "animation_url": "ipfs://QmZAuKhEivpnrhPyvhJyPGti4fGLLYQLqvUtRtvsL8wkuC/SmallSize-Low-Tech%20Sphere.mp4",
              "image": "ipfs://QmZAuKhEivpnrhPyvhJyPGti4fGLLYQLqvUtRtvsL8wkuC/SmallSize-Low-Tech%20Sphere.mp4",
              "external_url": ""
          },
          "description": "This competition will reward participants with ideas to maximize gas savings. The first place gets ⅔ (66.6%) of the prize pool, and the second place gets ⅓ (33.3%).\n\nSubmissions get classified on the basis of the average gas savings as reported by the gas reporter. The submission with the lowest average gas usage will win.\n    \nThe guidelines are as follows:\n* Changes should be limited to solidity files only. Tests should only be changed if they fail because of the changes in gas usage (e.g. tests that hardcode gas usage values).\n* Optimizations should use Solidity (no inline assembly).\n* All tests in the repository should pass.\n* The score of the submission is the total average amount of gas used for each function (i.e., the sum of all numbers in the “avg” column), as reported by the hardhat-gas-reporter when running the tests in the repository.\n* Submitters are kindly asked to include this number in their report, and can adapt this script for doing so: https://github.com/hats-finance/hats-contracts/blob/develop/gas-avg-check.py\n* Submissions should at least have a 5% improvement with respect to the original score.",
          "percentage": 3,
          "capAmount": "",
          "contractsCoveredNew": []
      },
      {
          "id": "a31b83b1-2098-45e8-a968-c0b800db5d94",
          "decryptSubmissions": [
              "on"
          ],
          "name": "Low",
          "contracts-covered": [],
          "nft-metadata": {
              "name": "Protocol protector",
              "description": "Audit low severity reward",
              "animation_url": "ipfs://QmZAuKhEivpnrhPyvhJyPGti4fGLLYQLqvUtRtvsL8wkuC/SmallSize-%20Medium-%20Electric%20Dreams.mp4",
              "image": "ipfs://QmZAuKhEivpnrhPyvhJyPGti4fGLLYQLqvUtRtvsL8wkuC/SmallSize-%20Medium-%20Electric%20Dreams.mp4",
              "external_url": ""
          },
          "description": "Issues where the behavior of the contracts differs from the intended behavior (as described in the docs and by common sense), but no funds are at risk.\n\n**SUBMISSION GUIDELINES:**\n\n* Submissions should be made using the Hats Dapp.\n* You can submit one on-chain submission mentioning all issues found on the repo.\n* All new submissions will be created on the forked repo for HOPR on Hats: https://github.com/hats-finance\n* Please send a plain ASCII file following the following format:\n  * [TITLE]: short description of the issue.\n  * [SEVERITY]: either high, medium or low, see the rules.\n* Submission should contain at least one test demonstrating the problem and, if possible, a possible fix.\n\n**REPORT TEMPLATE**:\n\n* Description: Describe the context and the effect of the vulnerability.\n * Attack scenario: Describe how the vulnerability can be exploited. \n * Attachment:\n 1. Proof of Concept (PoC) file: You must provide a file containing a proof of concept (PoC) that demonstrates the vulnerability you have discovered. \n 2. Revised Code File (Optional): If possible, please provide a second file containing the revised code that offers a potential fix for the vulnerability. This file should include the following information:\n * Comment with clear explanation of the proposed fix.\n* The revised code with your suggested changes. \n * Any additional comments or explanations that clarify how the fix addresses the vulnerability. \n\n * Recommendation: Describe a patch or potential fix for the vulnerability.\n *Due to the nature of the audit competition mechanism, the repost will not be encrypted*  \n\n**LIMITATIONS:**\nReporters will not receive a bounty for:\n\n* Any known issue, such as:\n  * Issues mentioned in any previous audit reports\n  * Vulnerabilities that were already made public (by Hats, HOPR or any third party)\n  * “Centralization risks” that are known and/or explicitly coded into the protocol (e.g. an administrator can upgrade crucial contracts and steal all funds)\n*  Attacks that require access to specific combinations of leaked private keys or trusted addresses (see Scope section for more details)\n*  Issues that are not responsibly disclosed (issues should typically be reported through our platform)",
          "percentage": 10,
          "capAmount": "",
          "contractsCoveredNew": []
      },
      {
          "id": "db87bc07-1c0d-4fb5-8b4c-c9a09e32d378",
          "decryptSubmissions": [
              "on",
              "on"
          ],
          "name": "Medium",
          "contracts-covered": [],
          "nft-metadata": {
              "name": "Protocol champion",
              "description": "Audit medium severity reward",
              "animation_url": "ipfs://QmZAuKhEivpnrhPyvhJyPGti4fGLLYQLqvUtRtvsL8wkuC/SmallSizeHigh-%20Altair.mp4",
              "image": "ipfs://QmZAuKhEivpnrhPyvhJyPGti4fGLLYQLqvUtRtvsL8wkuC/SmallSizeHigh-%20Altair.mp4",
              "external_url": ""
          },
          "description": "Issues that lead to an economic loss but do not lead to direct loss of on-chain assets. Examples include:\n\n* Gas griefing attacks (make users overpay for gas)\n* Attacks that make essential functionality of the contracts temporarily unusable or inaccessible.\n* Short-term freezing of user funds.\n\nIn addition, any issues which lead to censorship of one of more nodes, purely through smart contract interactions\n\nExamples of censorship include:\n\n* Preventing a node from sending or relaying messages\n* Rendering a node inactive\n* Removing a node from the network\n\n**SUBMISSION GUIDELINES:**\n\n* Submissions should be made using the Hats Dapp.\n* You can submit one on-chain submission mentioning all issues found on the repo.\n* All new submissions will be created on the forked repo for HOPR on Hats: https://github.com/hats-finance\n* Please send a plain ASCII file following the following format:\n  * [TITLE]: short description of the issue.\n  * [SEVERITY]: either high, medium or low, see the rules.\n* Submission should contain at least one test demonstrating the problem and, if possible, a possible fix.\n\n**REPORT TEMPLATE**:\n\n* Description: Describe the context and the effect of the vulnerability.\n * Attack scenario: Describe how the vulnerability can be exploited. \n * Attachment:\n 1. Proof of Concept (PoC) file: You must provide a file containing a proof of concept (PoC) that demonstrates the vulnerability you have discovered. \n 2. Revised Code File (Optional): If possible, please provide a second file containing the revised code that offers a potential fix for the vulnerability. This file should include the following information:\n * Comment with clear explanation of the proposed fix.\n* The revised code with your suggested changes. \n * Any additional comments or explanations that clarify how the fix addresses the vulnerability. \n\n * Recommendation: Describe a patch or potential fix for the vulnerability.\n *Due to the nature of the audit competition mechanism, the repost will not be encrypted*  \n\n**LIMITATIONS:**\nReporters will not receive a bounty for:\n\n* Any known issue, such as:\n  * Issues mentioned in any previous audit reports\n  * Vulnerabilities that were already made public (by Hats, HOPR or any third party)\n  * “Centralization risks” that are known and/or explicitly coded into the protocol (e.g. an administrator can upgrade crucial contracts and steal all funds)\n*  Attacks that require access to specific combinations of leaked private keys or trusted addresses (see Scope section for more details)\n*  Issues that are not responsibly disclosed (issues should typically be reported through our platform)",
          "percentage": "25",
          "capAmount": "",
          "contractsCoveredNew": []
      },
      {
          "id": "d6091a8d-d78b-4019-938d-1491234652c1",
          "decryptSubmissions": [
              "on",
              "on"
          ],
          "name": "High",
          "contracts-covered": [],
          "nft-metadata": {
              "name": "Protocol savior",
              "description": "Audit high severity reward",
              "animation_url": "ipfs://QmZAuKhEivpnrhPyvhJyPGti4fGLLYQLqvUtRtvsL8wkuC/SmallSize-Critical-Swarm%20of%20Thoughts.mp4",
              "image": "ipfs://QmZAuKhEivpnrhPyvhJyPGti4fGLLYQLqvUtRtvsL8wkuC/SmallSize-Critical-Swarm%20of%20Thoughts.mp4",
              "external_url": ""
          },
          "description": "Issues that lead to the loss of user funds. Such issues include:\n\n* Direct theft of any user funds, whether at rest or in motion.\n* Long-term freezing of user funds.\n* Theft or long term freezing of unclaimed yield or other assets.\n* Protocol insolvency\n\n**SUBMISSION GUIDELINES:**\n\n* Submissions should be made using the Hats Dapp.\n* You can submit one on-chain submission mentioning all issues found on the repo.\n* All new submissions will be created on the forked repo for HOPR on Hats: https://github.com/hats-finance\n* Please send a plain ASCII file following the following format:\n  * [TITLE]: short description of the issue.\n  * [SEVERITY]: either high, medium or low, see the rules.\n* Submission should contain at least one test demonstrating the problem and, if possible, a possible fix.\n\n**REPORT TEMPLATE**:\n\n* Description: Describe the context and the effect of the vulnerability.\n * Attack scenario: Describe how the vulnerability can be exploited. \n * Attachment:\n 1. Proof of Concept (PoC) file: You must provide a file containing a proof of concept (PoC) that demonstrates the vulnerability you have discovered. \n 2. Revised Code File (Optional): If possible, please provide a second file containing the revised code that offers a potential fix for the vulnerability. This file should include the following information:\n * Comment with clear explanation of the proposed fix.\n* The revised code with your suggested changes. \n * Any additional comments or explanations that clarify how the fix addresses the vulnerability. \n\n * Recommendation: Describe a patch or potential fix for the vulnerability.\n *Due to the nature of the audit competition mechanism, the repost will not be encrypted*  \n\n**LIMITATIONS:**\nReporters will not receive a bounty for:\n\n* Any known issue, such as:\n  * Issues mentioned in any previous audit reports\n  * Vulnerabilities that were already made public (by Hats, HOPR or any third party)\n  * “Centralization risks” that are known and/or explicitly coded into the protocol (e.g. an administrator can upgrade crucial contracts and steal all funds)\n*  Attacks that require access to specific combinations of leaked private keys or trusted addresses (see Scope section for more details)\n*  Issues that are not responsibly disclosed (issues should typically be reported through our platform)",
          "percentage": "62",
          "capAmount": "310000",
          "contractsCoveredNew": []
      }
  ],
  "scope": {
      "reposInformation": [
          {
              "isMain": true,
              "url": "https://github.com/hoprnet/hoprnet",
              "commitHash": "274b59e409e6bf48c6d7d675de2d9905dcf1f813"
          }
      ],
      "description": "HOPR is a mixnet protocol where all nodes are incentived to relay packets by means of the novel Proof of Relay mechanism. SafeStaking by HOPR is a permissioning module for Safe that allows for tight control of monetary flows and permission management. SafeStaking by HOPR is designed to allow for highly automated node running while minimizing risk if the node is compromised.\n\nThe higher-level goals of the staking design are: (1) to decouple fund management from node operation; (2) to allow co-signing transactions for higher security; and (3) to reduce the impact of compromised nodes on user funds.\n\nIn brief, authorization of various actions is split amont three private keys. Through this separation of concerns, each private key has only a single area of functionality, which is distinct from the other keys.\nThis reduces the surface area of attacks and makes general recovery of the entire staking account easier.\n\nFull explanations can be found in the documentation.",
      "codeLangs": [
          "solidity",
          "rust"
      ],
      "docsLink": "https://github.com/hoprnet/hoprnet/tree/master/docs/sc-audit-08-2023/docs",
      "outOfScope": "All HOPR smart contracts can be found in the hoprnet monorepo: \n\n```\nhttps://github.com/hoprnet/hoprnet\n```\n\nAll smart contracts can be found within the folder:\n\n```\npackages/ethereum/contracts/src\n```\n\nSpecifically, the following contracts are within the scope of the audit:\n\n```bash\n├── Announcements.sol\n├── Channels.sol\n├── Crypto.sol\n├── Ledger.sol\n├── TicketPriceOracle.sol \n├── MultiSig.sol\n├── interfaces\n│   ├── IAvatar.sol\n│   ├── INetworkRegistryRequirement.sol\n│   ├── INodeManagementModule.sol\n│   └── INodeSafeRegistry.sol\n├── node-stake\n│   ├── NodeSafeRegistry.sol\n│   ├── NodeStakeFactory.sol\n│   └── permissioned-module\n│       ├── CapabilityPermissions.sol\n│       ├── NodeManagementModule.sol\n│       └── SimplifiedModule.sol\n└── utils\n    ├── EnumerableStringSet.sol\n    ├── EnumerableTargetSet.sol\n    └── TargetUtils.sol\n```\n\nThe following contracts are out of scope:\n\n```bash\n├── NetworkRegistry.sol # implements network gate which will be removed eventually\n├── proxy # implementations of adapters between network registry and staking\n│   ├── DummyProxyForNetworkRegistry.sol\n│   ├── SafeProxyForNetworkRegistry.sol\n│   └── StakingProxyForNetworkRegistry.sol\n└── static # existing contracts which will not be updated\n    ├── EnumerableStringSet.sol\n    ├── ERC777\n    │   └── ERC777Snapshot.sol\n    ├── HoprDistributor.sol\n    ├── HoprForwarder.sol\n    ├── HoprToken.sol\n    ├── HoprWrapper.sol\n    ├── HoprWrapperProxy.sol\n    ├── openzeppelin-contracts\n    │   ├── ERC777.sol\n    │   └── README.md\n    └── stake\n        ├── HoprBoost.sol\n        ├── HoprStake.sol\n        ├── HoprStake2.sol\n        ├── HoprStakeBase.sol\n        ├── HoprStakeSeason3.sol\n        ├── HoprStakeSeason4.sol\n        ├── HoprStakeSeason5.sol\n        ├── HoprStakeSeason6.sol\n        ├── HoprStakeSeason7.sol\n        ├── HoprWhitehat.sol\n        └── IHoprBoost.sol\n\n#### Compromised Private Keys\n\nSince one major goal of SafeStaking is to minimize damage when a node key is compromised, exploits which involve access to private keys ARE in scope. However, the following related issues are out of scope:\n\n- Loss of funds directly controlled by the compromised key\n- Situations where an attacker gains access to ALL keys needed to fully control the Safe and associated node (i.e., m of n owner keys of an m or n safe)\n\nIn addition, the following issues are known and out of scope:\n\n#### FlashLoan\n\nIn certain circumstances, the HOPR payment channel smart contract could be used to support a flashloan. Details can be found in section 7.2 of Chain Security's audit report: https://chainsecurity.com/security-audit/hoprnet-node-management-module/\n\n#### Ticket Aggregation\n\nTicket redemption can optionally utilize ticket aggregation, a process which is currently interactive. This is being removed, hence all exploits which require the interactive nature of this process are out of scope. Examples include \"bully nodes\" which do not cooperate with an aggregation request and thereby force redeemers to redeem tickets one by one at potentially much higher tx fees.\n```",
      "protocolSetupInstructions": {
          "tooling": "foundry",
          "instructions": "## Installation\n1. rustup\n2. foundryup\n3. brew install lcov (to install lcov for viewing coverage report)\n\n## Contracts\n\n```\ncd contracts\n```\n\n### Test\n\n```\nmake sc-test\n```\n\nWhen developing staking contract, make sure to test against the forked gnosis chain, e.g.\n\n```\nforge test --fork-url \"https://provider-proxy.hoprnet.workers.dev/xdai_mainnet\" --match-path test/stake/HoprStakeSeason6.t.sol\n```\n\n## Run Coverage\n\n```\nmake sc-coverage\n```\n\n## Deploy and Verify deployed contracts\n\n### Local\n``` \n# run anvil as a daemon.\nanvil & make anvil-deploy-all\n```\n```\n# The anvil daemon can be killed with\nlsof -i :8545 -s TCP:LISTEN -t | xargs -I {} -n 1 kill {}\n```\n\n### Staging\nThe staging environment is on the same chain as in production: Gnosis chain\n\n```\nsource .env\n```\n```\n// This verifies contract on sourcify\nFOUNDRY_PROFILE=staging NETWORK=debug-staging forge script --broadcast --verify --verifier sourcify script/DeployAll.s.sol:DeployAllContractsScript\n\n// This verifies contract on blockscout\nFOUNDRY_PROFILE=staging NETWORK=debug-staging forge script --broadcast \\\n   --verify --verifier blockscout --verifier-url \"https://gnosis.blockscout.com/api?\" \\\n   --etherscan-api-key \"${BLOCKSCOUT_API_KEY}\" \\\n   --chain 100 --use 0.8.19 \\\n   script/DeployAll.s.sol:DeployAllContractsScript\n\n// This deploys contract to staging environment and verifies contracts on Gnosisscan\nFOUNDRY_PROFILE=staging NETWORK=debug-staging forge script --broadcast \\\n   --verify --verifier etherscan --verifier-url \"https://api.gnosisscan.io/api\" \\\n   --delay 30 --chain 100 --etherscan-api-key \"${ETHERSCAN_API_KEY}\" \\\n   --use <specify_if_other_than_that_in_config> \\\n   script/DeployAll.s.sol:DeployAllContractsScript\n```\n\n### Production\nUse either of the commands below:\n\n```\nFOUNDRY_PROFILE=staging NETWORK=debug-staging forge script --broadcast --verify --verifier sourcify script/DeployAll.s.sol:DeployAllContractsScript\n```\n\nIf contracts are not properly verified on explorers, please try with the manual verification. E.g.\n\n```\n# Verify HoprStakingProxyForNetworkRegistry contract on goerli\nexport ETHERSCAN_API_KEY=<gnosisscan_api_key>\nforge verify-contract --verifier etherscan --verifier-url \"https://api.gnosisscan.io/api\" --chain gnosis --constructor-args $(cast abi-encode \"constructor(address,address,uint256)\" 0xA02Af160a280957A8881879Ee9239A614Ab47F0D 0x4fF4e61052a4DFb1bE72866aB711AE08DD861976 1000000000000000000000) 0xcA9B1bC189F977B2A9217598D0300d956b6a719f src/proxy/HoprStakingProxyForNetworkRegistry.sol:HoprStakingProxyForNetworkRegistry\n```\n\nTo check the verification result, use\n\n```\nforge verify-check --chain-id <number> <GUID>\n```"
      }
  }
}